class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        def isLegal(row,col):
            return 0 <= row < self.rows and 0 <= col < self.cols
        def bfs(outer):
            if not outer:
                return
            newOuter = set()
            for point in outer:
                row,col = point[0],point[1]
                by = {(row-1,col),(row,col+1),(row+1,col),(row,col-1)}
                for p in by:
                    m,n = p[0],p[1]
                    if isLegal(m,n) and (m,n) not in self.visited:
                        self.dist[m][n] = self.dist[row][col] + 1
                        self.visited.add((m,n))
                        newOuter.add((m,n))
            if newOuter:
                bfs(newOuter)            
        self.rows = len(matrix)
        self.cols = len(matrix[0])
        self.visited = set()
        self.dist = [[0]*self.cols for _ in range(self.rows)]
        for i in range(self.rows):
            for j in range(self.cols):
                if matrix[i][j] == 0:
                    self.visited.add((i,j))
        bfs(self.visited.copy())
        return self.dist
